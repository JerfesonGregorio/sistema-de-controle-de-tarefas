package edu.ifpb.singleton;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.sql.*;
import java.util.stream.Collectors;

public class ConfigManager {
    // üîµ Padr√£o Singleton aplicado
    // Mant√©m apenas uma inst√¢ncia da classe em toda a aplica√ß√£o
    private static ConfigManager instance;

    // A conex√£o com o banco de dados tamb√©m √© √∫nica
    private static Connection connection = null;

    // üîí Construtor privado -> impede que outras classes criem inst√¢ncias diretamente
    private ConfigManager() throws SQLException {
        try {
            // Carregamento do driver JDBC do PostgreSQL
            Class.forName("org.postgresql.Driver");

            // Configura√ß√µes vindas de vari√°veis de ambiente
            String url = System.getenv().getOrDefault(
                    "DB_URL", "jdbc:postgresql://localhost:5432/postgres"
            );
            String user = System.getenv().getOrDefault(
                    "DB_USER", "postgres"
            );
            String password = System.getenv().getOrDefault(
                    "DB_PASSWORD", "postgres"
            );

            // Cria√ß√£o da conex√£o √∫nica com o banco
            connection = DriverManager.getConnection(url, user, password);

        } catch (SQLException ex) {
            throw new SQLException("Erro conectando ao banco", ex);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * üîµ M√©todo Singleton: garante que s√≥ exista uma inst√¢ncia do ConfigManager
     * - Se n√£o existir, cria.
     * - Se existir mas a conex√£o estiver fechada, recria.
     * - Caso contr√°rio, retorna a mesma inst√¢ncia.
     */
    public static ConfigManager getInstance() throws SQLException {
        if (instance == null) {
            instance = new ConfigManager();
            inicializarBanco(); // Garante que o banco seja inicializado (infraestrutura pronta)
        } else if (instance.getConnection().isClosed()) {
            instance = new ConfigManager();
        }
        return instance;
    }

    // Retorna a conex√£o √∫nica
    public Connection getConnection() {
        return connection;
    }

    /**
     * Executa o script SQL de cria√ß√£o das tabelas a partir do arquivo schema.sql
     * üéØ Motiva√ß√£o: Automatiza a inicializa√ß√£o do banco na primeira execu√ß√£o
     */
    private static void runSchemaScript() {
        try {
            InputStream inputStream = ConfigManager.class.getClassLoader().getResourceAsStream("schema.sql");
            if (inputStream == null) {
                System.err.println("Arquivo schema.sql n√£o encontrado em resources!");
                return;
            }

            String sql = new BufferedReader(new InputStreamReader(inputStream))
                    .lines()
                    .collect(Collectors.joining("\n"));

            try (Statement stmt = connection.createStatement()) {
                stmt.execute(sql);
                System.out.println("Script SQL executado com sucesso.");
            }

        } catch (Exception e) {
            System.err.println("Erro ao executar script SQL: " + e.getMessage());
        }
    }

    /**
     * Verifica se o banco j√° possui as tabelas essenciais.
     * Caso contr√°rio, roda o script de inicializa√ß√£o.
     * üéØ Motiva√ß√£o: Garante que a aplica√ß√£o sempre tenha a estrutura m√≠nima
     */
    private static void inicializarBanco() {
        try {
            DatabaseMetaData meta = connection.getMetaData();
            ResultSet rs = meta.getTables(null, null, "users", null);

            if (!rs.next()) {
                System.out.println("Inicializando banco de dados...");
                runSchemaScript();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
